Use the @Output() decorator in the child component or directive to allow data to flow from the child out to the parent.

An @Output() property should normally be initialized to an Angular EventEmitter with values flowing out of the component as events.


In the child Component Class

import Output and EventEmitter in the child component class:

 
1. import { Output, EventEmitter } from '@angular/core'

2. @Output() newItemEvent = new EventEmitter<string>();

The different parts of the above declaration are as follows:

@Output()—a decorator function marking the property as a way for data to go from the child to the parent
newItemEvent—the name of the @Output()
EventEmitter<string>—the @Output()'s type
new EventEmitter<string>()—tells Angular to create a new event emitter and that the data it emits is of type string. The type could be any type, such as number, boolean, and so on. 


3.create an addNewItem() method in the same component class:
 addNewItem(value: string) {
    this.newItemEvent.emit(value);
  }

The addNewItem() function uses the @Output(), newItemEvent, to raise an event in which it emits the value the user types into the <input>. In other words, when the user clicks the add button in the UI, the child lets the parent know about the event and gives that data to the parent.


In the child's template

1. <label>Add an item: <input #newItem></label>
<button (click)="addNewItem(newItem.value)">Add to parent's list</button>


The child's template has two controls. The first is an HTML <input> with a template reference variable , #newItem, where the user types in an item name. Whatever the user types into the <input> gets stored in the #newItem variable.

The second element is a <button> with an event binding. You know it's an event binding because the part to the left of the equal sign is in parentheses, (click).

The (click) event is bound to the addNewItem() method in the child component class which takes as its argument whatever the value of #newItem is.

Now the child component has an @Output() for sending data to the parent and a method for raising an event. The next step is in the parent.


In the parent

1. src/app/app.component.ts
 
export class AppComponent {
  items = ['item1', 'item2', 'item3', 'item4'];

  addItem(newItem: string) {
    this.items.push(newItem);
  }
}


2. In the parent's template
 
<(Child Component name) (newItemEvent)="addItem($event)"></(Child Component name>


The event binding, (newItemEvent)='addItem($event)', tells Angular to connect the event in the child, newItemEvent, to the method in the parent, addItem(), and that the event that the child is notifying the parent about is to be the argument of addItem().  The $event contains the data that the user types into the <input> in the child template UI.


3. <ul>
  <li *ngFor="let item of items">{{item}}</li>
</ul>
